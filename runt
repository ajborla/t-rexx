#!/bin/bash

# -----------------------------------------------------------------------------
# Script runner for t.rexx
#
# $1 -> the test script (rexx)
# $2 -> the application to test (rexx)
#
# This script concatenates the files:
#
#   t1.rexx + ${1}.rexx + t2.rexx + ${2}.rexx + t3.rexx
#
# and executes the resulting test runner file. The return code from the
# test runner is passed back to the command-line. Valid return code values:
#
# - 0        -> value indicates success, all tests passed
# - positive -> value indicates failure, value equals number of failed tests
#
# Revision History:
#
# Date          Version     Author              Description
# ----------    -------     ----------------    -------------------------------
# 2015-04-03      0.0.1     Dave Nicolette      Initial implementation.
# 2023-02-07      0.0.2     Anthony J. Borla    Return return code.
# 2023-02-08      0.0.3     Anthony J. Borla    Pass TAP option to runner.
# 2023-02-09      0.0.4     Anthony J. Borla    Revised header content.
# 2023-02-10      0.0.5     Anthony J. Borla    Fix hard-coded test runner.
# 2023-02-10      0.1.0     Anthony J. Borla    Port help, and usage functions.
# -----------------------------------------------------------------------------

# ---- Constants

RUNNER="t.rexx"

# ---- Functions

usage() {
    echo "Usage: ${0} [-h | --help] | [--keep] [--tap-output] test source"
}

help() {
    echo 'Executes t-rexx unit test runner using supplied Rexx test script on specified Rexx source file.'
    echo ' * ${1} is the test script name, ${2} is the source file (code under test), both sans .rexx extension'
    echo ' * --tap-output option generates TAP-compliant output; default is verbose report style'
    echo ' * --keep option ensures the generated test runner is not deleted'
    echo ' * Return code zero on test run success; positive-valued return code equals number of failed tests'
    echo ' * Expects "rexx" interpreter to be available'
    echo ' * Expects t-rexx component files, t1.rexx, t2.rexx, and t3.rexx, co-resident with test and source'
    echo
}

error() {
    >&2 echo "Error: ${1}"
    >&2 usage
    exit 1
}

# ---- Entry point

cat t1.rexx "${1}.rexx" t2.rexx "${2}.rexx" t3.rexx > "${RUNNER}"
rexx "${RUNNER}" TAP

